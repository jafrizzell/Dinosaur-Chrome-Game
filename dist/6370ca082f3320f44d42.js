const emoteBlacklist=[];class GIF_Instance{constructor(t,e={}){this.config=Object.assign({gifAPI:"https://gif-emotes.opl.io"},e),this.id=t,this.gifTiming=10,this.currentFrame=0,this.loadedImages=0,this.frames=[],this.needsUpdate=!1,this.spriteSheet=document.createElement("canvas"),this.spriteSheetContext=this.spriteSheet.getContext("2d"),this.square=0,this.current={x:0,y:0},t.match(/http/)?(this.url=t,this.imageFallback()):fetch(`${this.config.gifAPI}/gif/${t}`).then((t=>t.json())).then((e=>{if(0===e.count||!e.count||emoteBlacklist.includes(t))this.url=`${this.config.gifAPI}/gif/${t}.gif`,this.imageFallback();else{this.width=e.frames[0].width,this.height=e.frames[0].height,this.gifTiming=e.frames[0].delay,this.frames=e.frames,this.square=Math.ceil(Math.sqrt(e.frames.length));for(let e=0;e<this.frames.length;e++){const i=this.frames[e];this.width=this.height=Math.max(Math.max(this.width,this.height),Math.max(i.x+i.width,i.y+i.height)),i.delay<1&&(i.delay=1e3/30/10),i.image=new Image(i.width,i.height),i.image.crossOrigin="",i.image.addEventListener("load",(()=>{if(this.loadedImages++,this.loadedImages>=this.frames.length-1)for(let t=0;t<this.frames.length;t++)this.frames[t].spriteSheet=!1})),i.image.src=`${this.config.gifAPI}/static/${t}/${e}.png`}this.spriteSheet.height=this.height*this.square,this.spriteSheet.width=this.width*this.square,this.loadListener()}})),this.canvas=document.createElement("canvas"),this.canvas.width=128,this.canvas.height=128,this.ctx=this.canvas.getContext("2d")}imageFallback(){this.image=new Image,this.image.crossOrigin="anonymous",this.image.addEventListener("load",this.imageFallbackListener.bind(this)),this.image.src=this.url}imageFallbackListener(){let t=2;for(;Math.pow(2,t)<Math.max(this.image.width,this.image.height);)t++;this.canvas.width=Math.pow(2,t),this.canvas.height=Math.pow(2,t);const e=Math.min(this.canvas.height/this.image.height,this.canvas.width/this.image.width);this.ctx.drawImage(this.image,0,0,this.image.width*e,this.image.height*e),this.spriteSheet.width=this.canvas.width,this.spriteSheet.height=this.canvas.height,this.spriteSheetContext.drawImage(this.canvas,0,0),this.needsUpdate=!0,this.needsSpriteSheetUpdate=!0}loadListener(){let t=2;for(;Math.pow(2,t)<Math.max(this.frames[0].width,this.frames[0].height);)t++;this.canvas.width=Math.pow(2,t),this.canvas.height=Math.pow(2,t),this.update()}getPosition(t){return{x:t%this.square,y:Math.floor(t/this.square)}}updatePosition(t){const e=this.getPosition(t);this.current.x=e.x,this.current.y=e.y}dispose(t){if(t<0&&(t+=this.frames.length),2==this.frames[t].disposal&&this.ctx.clearRect(this.frames[t].x,this.frames[t].y,this.frames[t].width,this.frames[t].height),3==this.frames[t].disposal)for(let e=t-1;e>=0;e--){const t=this.frames[e];if(1!==t.disposal||0===e){if(t.image.complete&&t.canvas)try{this.ctx.drawImage(t.canvas,0,0)}catch(e){console.error("There was an error re-rendering the previous frame.",t,this.id)}break}}}update(){this.currentFrame++,this.currentFrame>=this.frames.length&&(this.currentFrame=0),this.updatePosition(this.currentFrame);const t=this.frames[this.currentFrame];t.spriteSheet?window.setTimeout(this.update.bind(this),10*t.delay):window.setTimeout(this.update.bind(this),0),t.image.complete&&(0===this.currentFrame?this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height):this.dispose(this.currentFrame-1),this.ctx.drawImage(t.image,0,0),this.needsUpdate=!0,t.canvas||(t.canvas=document.createElement("canvas"),t.canvas.width=this.canvas.width,t.canvas.height=this.canvas.height,t.ctx=t.canvas.getContext("2d"),t.ctx.drawImage(this.canvas,0,0)),t.spriteSheet||(this.spriteSheetContext.drawImage(this.canvas,this.current.x*this.width,this.current.y*this.height),t.spriteSheet=!0,this.needsSpriteSheetUpdate=!0))}}module.exports=GIF_Instance;